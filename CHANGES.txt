0.0.22:
- Fixed an issue where running rewriting over leaf functions multiple times
  could cause the red zone to be clobbered on 64-bit ELF
- Updated to new ARM symbolic expression types
- Switched to capstone-gt

0.0.21:
- Added support for symbolic expressions in data.
- Fixed CallPatch redundantly aligning the stack
- Made CallPatch default to aligning the stack and preserving caller-saved
  registers. Clients can opt out of this by specifying align_stack=False and
  preserve_caller_saved_registers=False to CallPatch.

0.0.20:
- Added support for ARM64
- Exposed the Assembler class
- Added ABI.temporary_label_prefix and InsertionContext.temporary_label

0.0.19:
- Added support for the .byte directive
- Added support for printing data blocks with show_block_asm

0.0.18:
- Added support for symbolic expressions with a constant addend

0.0.17:
- Exposed the ABI class, to allow transforms to get information about the
  target
- show_block_asm now prints out symbolic expressions

0.0.16:
- Fixed passing symbols as arguments with CallPatch on 64-bit ELF
- Added a libpath argument to RewritingContext.get_or_insert_extern_symbol
- Fixed incorrect stack padding with CallPatch

0.0.15:
- Added support for rewriting PE-32 GTIRB files

0.0.14:
- Performance improvements when inserting patches that don't contain return
  edges

0.0.13:
- Added a workaround for incomplete Capstone disassembly

0.0.12:
- Fixed a "dictionary changed size during iteration" exception

0.0.11:
- Initial public release
